{"version":3,"sources":["webpack:///src/app/event/pages/events/events-routing.module.ts","webpack:///src/app/event/pages/events/events.module.ts","webpack:///src/app/event/pages/events/events.page.ts","webpack:///src/app/event/pages/events/events.page.html","webpack:///src/app/events/services/event.service.ts"],"names":["routes","path","component","EventsPageRoutingModule","forChild","imports","exports","EventsPageModule","declarations","EventsPage","router","eventService","bookingService","upcomingEvents","console","log","getLatestEvents","currentEvents","getEvents","pipe","eventsResult","events","data","Event","context","errors","extensions","length","undefined","eventData","EventRooms","roomName","tap","event","randomUUID","seedEvents","seedEventInputObjects","getSeedEventInputObjects","createdEventsReturning","createEvents","subscribe","createdEventsResult","selector","templateUrl","styleUrls","GET_ALL_EVENTS","CREATE_EVENT","ORGANISER_UUID","CREATE_EVENTS","EventService","apollo","currentGivenDate","baseEventEndDateThresholdShouldBeGreaterThan","variables","eventEndDateTimeGreaterThanEqual","options","query","fetchPolicy","sundayService9AMStart","Sunday","sundayService1030AMEnd","sundayServiceBookingStart","Wednesday","sundayServiceBookingEnd","recurringDates","eventName","eventCapacity","eventDescription","eventCategory","chineseEventName","eventTuplesConcurrent","map","eventStartEndDateTime","eventStart","startDateTime","eventEnd","endDateTime","eventTstzRange","startEndDateTimeRangeTstzRangeText","bookingStartEndDateTime","bookingStart","bookingEnd","bookingTstzRange","englishEventInsertObject","getCreateEventObjectInput","chineseEventObjectInput","bothEvents","eventInsertObjects","concat","mutation","mutate","baseDateNow","Date","bookingAvailableStartDateTime","getTime","bookingAvailableEndDateTime","eventStartDateTime","eventEndDateTime","endDate","startTimeRange","endTimeRange","placeholderDateTimeRange","eventInsertObject","createEventReturning","providedIn","eventRoomDetails","bookingAvailableTstzRange","eventStartEndTstzRange","organiserUUID","bookingAvailabilityDateTimeRange","eventDateTimeRange","eventTopic","eventMedium","Organiser","organiserDetails","on_conflict","constraint","Organiser_randomUUID_key","update_columns","updated_at","Room","roomType","roomCapacity","Venue","venueName","Venue_randomUUID_key","Room_venueID_roomName_key","EventRoom_eventRoomID_eventID_roomID_venueID_roomName_event_key","createEventsRecurring","numberOfEvents","hh","mi"],"mappings":"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","file":"event-pages-events-events-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EventsPage } from './events.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EventsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EventsPageRoutingModule {}\n","import { SharedModule } from \"./../../../shared/modules/shared.module\";\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EventsPageRoutingModule } from './events-routing.module';\n\nimport { EventsPage } from './events.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    EventsPageRoutingModule\n  ],\n  declarations: [EventsPage]\n})\nexport class EventsPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { FetchResult } from \"apollo-link\";\nimport { of, Observable } from \"rxjs\";\nimport { filter, map } from \"rxjs/operators\";\nimport { Event_insert_input } from \"./../../../../../__generated__/globalTypes\";\nimport { EventService } from \"./../../../events/services/event.service\";\nimport { CreateEvents } from \"./../../../events/services/__generated__/CreateEvents\";\nimport { GetAllEvents, GetAllEvents_Event } from \"./../../../events/services/__generated__/GetAllEvents\";\nimport { CONSOLE_COLOUR } from \"./../../../globals/globals\";\nimport { BookingService } from \"./../../booking/services/booking.service\";\n\n@Component({\n  selector: \"app-events\",\n  templateUrl: \"./events.page.html\",\n  styleUrls: [\"./events.page.scss\"]\n})\nexport class EventsPage implements OnInit {\n  upcomingEvents: Observable<GetAllEvents_Event[]> = of([]);\n\n  constructor(public router: Router, public eventService: EventService, public bookingService: BookingService) {\n    console.log(\"EventsPage:: constructor\");\n  }\n  ngOnInit(): void {\n    console.log(\"EventsPage:: ngOnInit\");\n\n    this.upcomingEvents = this.getLatestEvents();\n  }\n\n  getLatestEvents(eventService: EventService = this.eventService): Observable<GetAllEvents_Event[]> {\n    console.log(\"EventsPage:: getLatestEvents\");\n\n    const currentEvents: Observable<FetchResult<GetAllEvents>> = eventService.getEvents();\n\n    const upcomingEvents: Observable<GetAllEvents_Event[]> = currentEvents.pipe(\n      map((eventsResult: FetchResult<GetAllEvents>) => {\n        const {\n          data: { Event: events },\n          context,\n          errors,\n          extensions\n        }: FetchResult<GetAllEvents> = eventsResult;\n        console.log(\"EventsPage -> eventsResult\", eventsResult);\n\n        if (errors?.length > 0) {\n          return undefined;\n        }\n        console.log(\"%c EventsPage:: subscribeLatestEvents -> events\", CONSOLE_COLOUR);\n\n        return eventsResult.data.Event;\n      }),\n      filter(\n        (eventData: GetAllEvents_Event[]) =>\n          eventData !== undefined &&\n          eventData[0]?.EventRooms !== undefined &&\n          eventData[0]?.EventRooms[0]?.roomName !== undefined\n      )\n    );\n\n    return upcomingEvents;\n  }\n\n  // - MARK: Click events\n  clickEventItem(tap: MouseEvent, event: GetAllEvents_Event, router: Router = this.router): void {\n    console.log(\"EventsPage -> eventItemClick -> eventItemClick\", tap);\n    console.log(\"EventsPage -> eventItemClick -> event\", event.randomUUID);\n  }\n\n  clickTestButton(event: Event): void {\n    console.log(\"EventsPage -> testButton -> event\", event);\n    this.seedEvents();\n  }\n  seedEvents(eventService: EventService = this.eventService): void {\n    const seedEventInputObjects: Event_insert_input[] = eventService.getSeedEventInputObjects();\n    console.log(\"EventsPage -> seedEvents -> getSeedEventInputObjects\", seedEventInputObjects);\n\n    const createdEventsReturning: Observable<FetchResult<CreateEvents>> = eventService.createEvents(\n      seedEventInputObjects\n    );\n\n    createdEventsReturning.subscribe((createdEventsResult: FetchResult<CreateEvents>) => {\n      console.log(\"EventsPage -> seedEvents -> createdEventsResult\", createdEventsResult);\n    });\n  }\n}\n","<app-custom-header pageTitle=\"COVIDSafe Events\"></app-custom-header>\n\n<ion-content>\n  <ion-list>\n    <ion-list-header>Upcoming events</ion-list-header>\n    <ion-item-sliding *ngFor=\"let event of upcomingEvents | async\">\n      <ion-item-options>\n        <ion-item-option color=\"danger\">Check </ion-item-option>\n      </ion-item-options>\n      <ion-item button (click)=\"clickEventItem($event, event)\">\n        <ion-avatar slot=\"start\">\n          <img\n            src=\"/assets/images/emp-cmca-logo-small-172x172-placeholder.jpg\"\n            alt=\"Placeholder-image-church\"\n          />\n          <!-- <ion-avatar slot=\"start\">\n          <img\n            src=\"https://scontent.fbne5-1.fna.fbcdn.net/v/t1.0-1/p720x720/40265936_232195504087460_8302723750890045440_o.jpg?_nc_cat=111&_nc_sid=dbb9e7&_nc_ohc=YYAttiKbqXQAX9KJBTk&_nc_ht=scontent.fbne5-1.fna&_nc_tp=6&oh=ce562445bd0182928dd2c9a086194140&oe=5F46228C\"\n            alt=\"Placeholder-image-church\"\n        /> -->\n        </ion-avatar>\n        <ion-label>\n          <h2>{{event?.eventName}}</h2>\n          <h3>{{event?.EventRooms[0]?.roomName}}</h3>\n          <p>\n            {{event.eventStartDateTime | date: 'EEEE\\',\\' dd MMM HH:mm'}} – {{event.eventEndDateTime | date: 'HH:mm'}}\n          </p>\n        </ion-label>\n      </ion-item>\n    </ion-item-sliding>\n  </ion-list>\n  <!-- <ion-button (click)=\"clickTestButton($event)\"> </ion-button> -->\n</ion-content>\n","import { WeekDay } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { Apollo } from \"apollo-angular\";\nimport { MutationOptions, SubscriptionOptions } from \"apollo-client\";\nimport { FetchResult } from \"apollo-link\";\nimport { DocumentNode } from \"graphql\";\nimport gql from \"graphql-tag\";\nimport { getLocaleMidnightDateTime } from \"src/app/globals/globals\";\nimport {\n  getMillisecondsFromDays,\n  getPostgresTimestamptzTstzRange,\n  getRecurringEventBookingDateTime,\n  nextDayDateWithTime as getNextDayDateWithTime\n} from \"../../shared/utilities/date-utilities\";\nimport {\n  Event_insert_input,\n  Organiser_constraint,\n  Organiser_update_column,\n  EventRoom_constraint,\n  EventRoom_update_column,\n  Room_constraint,\n  Room_update_column,\n  Venue_constraint,\n  Venue_update_column\n} from \"./../../../../__generated__/globalTypes\";\nimport { EventBookingDateTimeRange } from \"./../../shared/utilities/date-utilities\";\nimport { CreateEvent, CreateEventVariables } from \"./__generated__/CreateEvent\";\nimport { CreateEvents, CreateEventsVariables } from \"./__generated__/CreateEvents\";\nimport { GetAllEvents, GetAllEventsVariables } from \"./__generated__/GetAllEvents\";\n\nconst enum EventRoomVenueDetails {\n  WholeChurchVenue = \"9cb826dc-fcf8-406e-8b01-f4eba15dfcc6\",\n  WholeChurchVenueDescription = \"Eight Mile Plains Chinese Methodist Church\",\n  EnglishHallName = \"English hall\",\n  ChineseHallName = \"Chinese hall\",\n  EnglishHallDescription = \"English hall for live stream and in-person services\",\n  ChineseHallDescription = \"Chinese main hall for live stream and in-person services\"\n}\nconst GET_ALL_EVENTS: DocumentNode = gql`\n  # Get all future events.\n  # Default just in case dumb hasura behaviour doesn't return EventRooms but somehow returns Events depending on presence of comparison exp\n  subscription GetAllEvents($eventEndDateTimeGreaterThanEqual: timestamptz = \"2020-07-28\") {\n    Event(where: { eventEndDateTime: { _gte: $eventEndDateTimeGreaterThanEqual } }, limit: 20) {\n      eventName\n      eventDescription\n      eventStartDateTime\n      eventEndDateTime\n      bookingAvailableStartDateTime\n      bookingAvailableEndDateTime\n      randomUUID\n      updated_at\n      EventRooms {\n        roomName\n        eventRoomUUID\n        eventRoomDetails\n      }\n    }\n  }\n`;\n\n// - FIXME: Placeholders\nconst CREATE_EVENT: DocumentNode = gql`\n  mutation CreateEvent($eventInsertObject: Event_insert_input! = {}) {\n    insert_Event_one(object: $eventInsertObject) {\n      randomUUID\n      bookingAvailableStartDateTime\n      bookingAvailableEndDateTime\n      eventStartDateTime\n      eventEndDateTime\n      eventDateTimeRange\n      bookingAvailabilityDateTimeRange\n      eventName\n      eventTopic\n      eventCategory\n      eventCapacity\n      eventDescription\n      eventMedium\n    }\n  }\n`;\nconst ORGANISER_UUID: string = \"b669fc76-3130-4c4e-a04e-49e9f067ea9c\";\n\nconst CREATE_EVENTS: DocumentNode = gql`\n  mutation CreateEvents(\n    $eventInsertObjects: [Event_insert_input!]! = [\n      {\n        EventSeries: { data: { eventSeriesDetails: \"Sunday service (English)\", eventSeriesName: \"Sunday worship\" } }\n        Organiser: { data: { randomUUID: \"b669fc76-3130-4c4e-a04e-49e9f067ea9c\" } }\n      }\n    ]\n  ) {\n    insert_Event(objects: $eventInsertObjects) {\n      affected_rows\n      returning {\n        eventName\n        eventCapacity\n        eventStartDateTime\n        eventEndDateTime\n        bookingAvailableStartDateTime\n        bookingAvailableEndDateTime\n      }\n    }\n  }\n`;\n\n/* const CREATE_EVENTS_BY_ORGANISER: DocumentNode; */\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class EventService {\n  constructor(public apollo: Apollo) {\n    console.log(\"EventService -> constructor \");\n  }\n\n  /**\n   * Get upcoming events for users to book into and pre-register.\n   * @param currentGivenDate Defaulted to locale midnight to aid Hasura query/subscription caching all users.\n   */\n  getEvents(\n    currentGivenDate: Date = getLocaleMidnightDateTime(),\n    apollo: Apollo = this.apollo\n  ): Observable<FetchResult<GetAllEvents>> {\n    /* const pastEventEndDateThreshold: Date = getPastEventDateThreshold(currentGivenDate); */\n    const baseEventEndDateThresholdShouldBeGreaterThan: Date = currentGivenDate;\n\n    const variables: GetAllEventsVariables = {\n      eventEndDateTimeGreaterThanEqual: baseEventEndDateThresholdShouldBeGreaterThan\n    };\n    const options: SubscriptionOptions<GetAllEventsVariables> = {\n      query: GET_ALL_EVENTS,\n      fetchPolicy: \"cache-first\",\n      variables\n    };\n\n    const events: Observable<FetchResult<GetAllEvents>> = apollo.subscribe<GetAllEvents, GetAllEventsVariables>(\n      options\n    );\n\n    return events;\n  }\n\n  /**\n   * Get created seed events for Sunday recurring.\n   * Once-off.\n   * Other organisers should be able to manage their group weekly recurring events through organiser creation flow.\n   */\n  getSeedEventInputObjects(): Event_insert_input[] {\n    // tslint:disable: no-magic-numbers\n    const sundayService9AMStart: Date = getNextDayDateWithTime(WeekDay.Sunday, 9, 0);\n    const sundayService1030AMEnd: Date = getNextDayDateWithTime(WeekDay.Sunday, 10, 30);\n    const sundayServiceBookingStart: Date = getNextDayDateWithTime(WeekDay.Wednesday, 0, 0);\n    const sundayServiceBookingEnd: Date = getNextDayDateWithTime(WeekDay.Sunday, 23, 59, 59, 999);\n    // tslint:enable: no-magic-numbers\n\n    const recurringDates: EventBookingDateTimeRange[] = getRecurringEventBookingDateTime(\n      sundayService9AMStart,\n      sundayService1030AMEnd,\n      sundayServiceBookingStart,\n      sundayServiceBookingEnd\n    );\n    console.log(\"EventService -> getSeedEventInputObjects -> recurringDates\", recurringDates);\n\n    const eventName: string = \"Sunday service\";\n    const eventCapacity: number = 40;\n    const eventDescription: string = \"Description of community event\";\n    const eventCategory: string = \"Church\";\n\n    const chineseEventName: string = \"主日崇拜\";\n\n    const eventTuplesConcurrent: [Event_insert_input, Event_insert_input][] = recurringDates.map(\n      ({\n        eventStartEndDateTime: {\n          startDateTime: eventStart,\n          endDateTime: eventEnd,\n          startEndDateTimeRangeTstzRangeText: eventTstzRange\n        },\n        bookingStartEndDateTime: {\n          startDateTime: bookingStart,\n          endDateTime: bookingEnd,\n          startEndDateTimeRangeTstzRangeText: bookingTstzRange\n        }\n      }: EventBookingDateTimeRange) => {\n        const englishEventInsertObject: Event_insert_input = getCreateEventObjectInput(\n          EventRoomVenueDetails.EnglishHallName,\n          EventRoomVenueDetails.EnglishHallDescription,\n          bookingStart,\n          bookingEnd,\n          bookingTstzRange,\n          eventStart,\n          eventEnd,\n          eventTstzRange,\n          eventName,\n          eventCapacity,\n          eventDescription,\n          eventCategory\n        );\n        const chineseEventObjectInput: Event_insert_input = getCreateEventObjectInput(\n          EventRoomVenueDetails.ChineseHallName,\n          EventRoomVenueDetails.ChineseHallDescription,\n          bookingStart,\n          bookingEnd,\n          bookingTstzRange,\n          eventStart,\n          eventEnd,\n          eventTstzRange,\n          chineseEventName,\n          eventCapacity,\n          eventDescription,\n          eventCategory\n        );\n\n        const bothEvents: [Event_insert_input, Event_insert_input] = [\n          englishEventInsertObject,\n          chineseEventObjectInput\n        ];\n\n        return bothEvents;\n      }\n    );\n    const eventInsertObjects: Event_insert_input[] = ([] as Event_insert_input[]).concat(...eventTuplesConcurrent);\n\n    return eventInsertObjects;\n  }\n  createEvents(\n    eventInsertObjects: Event_insert_input[],\n    apollo: Apollo = this.apollo\n  ): Observable<FetchResult<CreateEvents>> {\n    const variables: CreateEventsVariables = { eventInsertObjects };\n\n    const options: MutationOptions<CreateEvents, CreateEventsVariables> = {\n      mutation: CREATE_EVENTS,\n      variables\n    };\n\n    // Create recurring dates and then map the array into an events array? double iteration but easier to handle\n\n    const createdEventsReturning: Observable<FetchResult<CreateEvents>> = apollo.mutate(options);\n\n    return createdEventsReturning;\n  }\n\n  createEvent(apollo: Apollo = this.apollo): Observable<FetchResult<CreateEvent>> {\n    const baseDateNow: Date = new Date();\n    const bookingAvailableStartDateTime: Date = new Date(baseDateNow.getTime() - getMillisecondsFromDays(2));\n    const bookingAvailableEndDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(7));\n    const eventStartDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(9));\n    const eventEndDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(10));\n    const endDate: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(10));\n\n    const startTimeRange: string = \"2020-07-22T09:27:53.667Z\";\n    const endTimeRange: string = \"2020-08-14T09:27:53.667Z\";\n    const placeholderDateTimeRange: string = `('${startTimeRange}', '${endTimeRange}']`;\n    const eventInsertObject: Event_insert_input = getCreateEventObjectInput(\n      EventRoomVenueDetails.EnglishHallName,\n      EventRoomVenueDetails.EnglishHallDescription,\n      bookingAvailableStartDateTime,\n      bookingAvailableEndDateTime,\n      getPostgresTimestamptzTstzRange(bookingAvailableStartDateTime, bookingAvailableEndDateTime),\n      eventStartDateTime,\n      eventEndDateTime,\n      getPostgresTimestamptzTstzRange(eventStartDateTime, eventEndDateTime)\n    );\n\n    console.log(\"EventService -> constructor -> eventInsertObject\", eventInsertObject);\n\n    const variables: CreateEventVariables = {\n      eventInsertObject\n    };\n    const createEventReturning: Observable<FetchResult<CreateEvent>> = apollo.mutate<CreateEvent, CreateEventVariables>(\n      {\n        mutation: CREATE_EVENT,\n        variables\n      }\n    );\n\n    return createEventReturning;\n  }\n}\n\nexport function getCreateEventObjectInput(\n  roomName: EventRoomVenueDetails.ChineseHallName | EventRoomVenueDetails.EnglishHallName,\n  eventRoomDetails: EventRoomVenueDetails.ChineseHallDescription | EventRoomVenueDetails.EnglishHallDescription,\n  bookingAvailableStartDateTime: Date,\n  bookingAvailableEndDateTime: Date,\n  bookingAvailableTstzRange: string,\n  eventStartDateTime: Date,\n  eventEndDateTime: Date,\n  eventStartEndTstzRange: string,\n  eventName: string = \"Sunday service\",\n  eventCapacity: number = 40,\n  eventDescription: string = \"Description of community event\",\n  eventCategory: string = \"Church\",\n  organiserUUID: string = ORGANISER_UUID\n): Event_insert_input {\n  return {\n    bookingAvailableStartDateTime,\n    bookingAvailableEndDateTime,\n    bookingAvailabilityDateTimeRange: bookingAvailableTstzRange,\n    eventStartDateTime,\n    eventEndDateTime,\n    eventDateTimeRange: eventStartEndTstzRange,\n    eventName,\n    eventTopic: \"Topic\",\n    eventMedium: \"In-person\",\n    eventCategory,\n    eventCapacity,\n    eventDescription,\n    Organiser: {\n      data: {\n        randomUUID: organiserUUID,\n        organiserDetails: \"\"\n        /* organiserDetails: \"anonymous\", */\n        /*\n        User: {\n          data: { username: \"anonymous\", emailAddress: \"anonymous@anonymous\" },\n          on_conflict: {\n            constraint: User_constraint.User_username_key,\n            update_columns: [User_update_column.updated_at]\n          }\n        }\n         */\n      },\n      on_conflict: {\n        constraint: Organiser_constraint.Organiser_randomUUID_key,\n        update_columns: [Organiser_update_column.updated_at]\n      }\n    },\n    EventRooms: {\n      data: [\n        {\n          eventRoomDetails,\n          Room: {\n            data: {\n              roomName,\n              roomType: \"Hall\",\n              roomCapacity: 49,\n              Venue: {\n                data: {\n                  venueName: EventRoomVenueDetails.WholeChurchVenueDescription,\n                  randomUUID: EventRoomVenueDetails.WholeChurchVenue\n                },\n                on_conflict: {\n                  constraint: Venue_constraint.Venue_randomUUID_key,\n                  update_columns: [Venue_update_column.updated_at]\n                }\n              }\n            },\n            on_conflict: {\n              constraint: Room_constraint.Room_venueID_roomName_key,\n              update_columns: [Room_update_column.updated_at]\n            }\n          }\n        }\n      ],\n      on_conflict: {\n        constraint: EventRoom_constraint.EventRoom_eventRoomID_eventID_roomID_venueID_roomName_event_key,\n        update_columns: [EventRoom_update_column.updated_at]\n      }\n    }\n  };\n}\n\n// Up to a certain date would require different calculation helper could still do? Probs should use a standard library.\n// Only need this function to generate the next dates.\n// Should pass in the starting date separately... and then just simple regenerate n times + 7 days\nfunction createEventsRecurring(numberOfEvents: number): Event_insert_input[] {\n  // 9am church\n  const hh: number = 9;\n  const mi: number = 0;\n  const eventStartDateTime: Date = getNextDayDateWithTime(WeekDay.Sunday);\n\n  return [];\n}\n"]}