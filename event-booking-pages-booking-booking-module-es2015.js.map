{"version":3,"sources":["./src/app/event/booking/models/person-form.ts","./src/app/event/booking/pages/booking/booking-routing.module.ts","./src/app/event/booking/pages/booking/booking.module.ts","./src/app/event/booking/pages/booking/booking.page.ts","./src/app/event/booking/pages/booking/booking.page.html"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAA4C;AACC;AAkB7C,mCAAmC;AAC5B,MAAM,UAAU;IAAvB;QAME,oBAAe,GAA6B,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChH,mBAAc,GAA6B,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC/G,sBAAiB,GAA6B,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,yDAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACtJ,uBAAkB,GAA6B,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,yDAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACrI,yBAAoB,GAAgC,IAAI,0DAAW,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,YAAY,CAAC,CAAC,CAAC;IAErG,CAAC;CAAA;AAID,MAAM,cAAc,GAAyB;IAC3C,UAAU,EAAE,IAAI;IAChB,eAAe,EAAE,IAAI;IACrB,cAAc,EAAE,IAAI;IACpB,iBAAiB,EAAE,IAAI;IACvB,kBAAkB,EAAE,IAAI;IACxB,oBAAoB,EAAE,IAAI;CAC3B,CAAC;AAEF,iDAAiD;AAC1C,MAAM,iBAAiB;IAC5B,MAAM,CAAC,gBAAgB;QACrB,OAAO,IAAI,UAAU,EAAE,CAAC;IAC1B,CAAC;CAkCF;;;;;;;;;;;;;ACnFD;AAAA;AAAA;AAAA;AAAA;AAAyC;AACc;AAEV;;;AAE7C,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAMK,MAAM,wBAAwB;;uGAAxB,wBAAwB;0KAAxB,wBAAwB,kBAH1B,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAC9B,4DAAY;mIAEX,wBAAwB,uFAFzB,4DAAY;6FAEX,wBAAwB;cAJpC,sDAAQ;eAAC;gBACR,OAAO,EAAE,CAAC,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACxC,OAAO,EAAE,CAAC,4DAAY,CAAC;aACxB;;;;;;;;;;;;;;ACfD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+D;AACW;AACjC;AACM;AACmB;AAErB;AAEuB;AAEvB;;AActC,MAAM,iBAAiB;;gGAAjB,iBAAiB;4JAAjB,iBAAiB,kBAXnB;YACP,4DAAY;YACZ,0DAAW;YACX,kEAAmB;YACnB,0DAAW;YACX,0EAAY;YACZ,4EAAiB;YACjB,gFAAwB;SACzB;mIAGU,iBAAiB,mBAFb,yDAAW,aARxB,4DAAY;QACZ,0DAAW;QACX,kEAAmB;QACnB,0DAAW;QACX,0EAAY;QACZ,4EAAiB;QACjB,gFAAwB;6FAIf,iBAAiB;cAZ7B,sDAAQ;eAAC;gBACR,OAAO,EAAE;oBACP,4DAAY;oBACZ,0DAAW;oBACX,kEAAmB;oBACnB,0DAAW;oBACX,0EAAY;oBACZ,4EAAiB;oBACjB,gFAAwB;iBACzB;gBACD,YAAY,EAAE,CAAC,yDAAW,CAAC;aAC5B;;;;;;;;;;;;;;;;;;;;;;;;;;ACvBiD;AAI4B;AAG+B;;;;;;;;;IC0DnG,sEACE;IAAA,iFACE;IAAA,0EAA+C;IAC/C,kFACF;IAAA,4DAAa;IAEb,6EACE;IAAA,0EAA0C;IAC1C,+EACF;IAAA,4DAAS;IACX,4DAAM;;;IATyC,0DAAgC;IAAhC,gGAAgC;IAK5B,0DAAgC;IAAhC,gGAAgC;;;;IAUnF,sEACE;IAAA,iFAME;IAFA,+aAAuD;IAEvD,uGACF;IAAA,4DAAa;IACf,4DAAM;;;IALF,0DAAgC;IAAhC,gGAAgC;;;IAStC,+EACE;IAAA,mGACF;IAAA,4DAAW;;ADvFnB,MAAM,kBAAkB,GAAW,sCAAsC,CAAC;AAC1E,MAAM,kBAAkB,GAAW,sCAAsC,CAAC;AAC1E,MAAM,kCAAkC,GAAG,YAAY,CAAC;AAMjD,MAAM,WAAW;IAmCtB,YACS,cAA8B,EAC9B,WAAwB,EACxB,eAAgC;QAFhC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;QACxB,oBAAe,GAAf,eAAe,CAAiB;QArCzC,sBAAiB,GAAW,EAAE,CAAC;QAC/B,sBAAiB,GAAW,EAAE,CAAC;QAC/B,8BAA8B;QACrB,uBAAkB,GAAW,sCAAsC,CAAC;QACpE,uBAAkB,GAAW,sCAAsC,CAAC;QACpE,qBAAgB,GAAW,kBAAkB,CAAC;QAC9C,qBAAgB,GAAW,kBAAkB,CAAC;QAUvD,4BAAuB,GAAW,EAAE,CAAC;QACrC,4BAAuB,GAAW,EAAE,CAAC;QAsBnC,MAAM,WAAW,GAA2B,WAAW,CAAC,KAAK,CAC3D,qEAAiB,CAAC,gBAAgB,EAAE,CACX,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAxBD,IAAI,0BAA0B;QAC5B,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,uBAAuB,CAAC;IAC3D,CAAC;IAED,IAAI,0BAA0B;QAC5B,OAAO,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,uBAAuB,CAAC;IAC3D,CAAC;IAED,IAAI,yCAAyC;QAC3C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC;IAC1C,CAAC;IAED,IAAI,yCAAyC;QAC3C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC;IAC1C,CAAC;IAWD,QAAQ;QACN,OAAO,CAAC,GAAG,CAAC,yBAAyB,CAAC,CAAC;QAEvC,MAAM,yBAAyB,GAAuB,2GAAyC,CAC7F,IAAI,CAAC,cAAc,CAAC,iCAAiC,EAAE,CACxD,CAAC;QACF,IAAI,CAAC,yBAAyB,GAAG,yBAAyB,CAAC;QAC3D,yBAAyB,CAAC,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YAC1C,IAAI,CAAC,YAAY,GAAG,GAAG,CAAC;QAC1B,CAAC,CAAC,CAAC;QAEH,MAAM,kBAAkB,GAAuB,2GAAyC,CACtF,IAAI,CAAC,cAAc,CAAC,iCAAiC,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAC7E,CAAC;QACF,IAAI,CAAC,yBAAyB,GAAG,kBAAkB,CAAC;QAEpD,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,eAAe,CACb,2BAAmC,sCAAsC,EACzE,IAAwB,EACxB,KAAY,EACZ,oBAA4C,IAAI,CAAC,WAAW,EAC5D,iBAAiC,IAAI,CAAC,cAAc;QAEpD,0DAA0D;QAC1D,2HAA2H;QAC3H,wFAAwF;QACxF,wBAAwB,KAAK,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,IAAI,CAAC,CAAC,CAAC;QAC3G,OAAO,CAAC,GAAG,CAAC,yCAAyC,EAAE,IAAI,EAAE,KAAK,EAAE,iBAAiB,CAAC,CAAC;QAEvF,MAAM,MAAM,GAAW,iBAAiB,CAAC,KAAK,CAAC;QAE/C,IAAI,MAAM,CAAC,eAAe,KAAK,EAAE,EAAE;YACjC,IAAI,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC,KAAK,EAAE,CAAC;YAErD,OAAO;SACR;QACD,qFAAqF;QACrF,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC,CAAC;QAEtD,SAAS;QACT,MAAM,qBAAqB,GAEtB,cAAc,CAAC,wBAAwB,CAAC,wBAAwB,EAAE,MAAM,CAAC,CAAC;QAE/E,qBAAqB,CAAC,SAAS,CAC7B,CAAC,mBAAgE,EAAE,EAAE;;YACnE,OAAO,CAAC,GAAG,CAAC,uDAAuD,EAAE,mBAAmB,CAAC,CAAC;YAC1F,IAAI,CAAC,YAAY,CACf,8BAA8B,2CAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,IAAI,0CAAE,aAAa,0CAAE,SAAS,0CAAG,CAAC,2CAAG,eAAe,EAAE,CAC1G,CAAC,KAAK,EAAE,CAAC;YACV,4EAA4E;YAE5E,wDAAwD;YACxD,gDAAgD;YAChD,uBAAuB;YACvB,IAAI,CAAC,iBAAiB,EAAE,CAAC;QAC3B,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;YACR,IAAI,CAAC,YAAY,CAAC,gBAAgB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC;QACrE,CAAC,CACF,CAAC;IACJ,CAAC;IAED,iBAAiB;QACf,MAAM,WAAW,GAA2B,IAAI,CAAC,WAAW,CAAC,KAAK,CAChE,qEAAiB,CAAC,gBAAgB,EAAE,CACX,CAAC;QAC5B,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;IACjC,CAAC;IAEK,YAAY,CAChB,MAAc,kCAAkC,EAChD,kBAAmC,IAAI,CAAC,eAAe;;YAEvD,MAAM,KAAK,GAAwB,MAAM,eAAe,CAAC,MAAM,CAAC;gBAC9D,OAAO,EAAE,GAAG;gBACZ,QAAQ,EAAE,IAAI;gBACd,QAAQ,EAAE,IAAI;gBACd,WAAW,EAAE,IAAI;aAClB,CAAC,CAAC;YAEH,qDAAqD;YACrD,MAAM,OAAO,GAAkB,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACvD,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC;QACjB,CAAC;KAAA;IAED,OAAO,CAAC,KAAa,EAAE,GAAW;QAChC,OAAO,KAAK,GAAG,GAAG,CAAC;IACrB,CAAC;;sEA3IU,WAAW;2FAAX,WAAW;QCjBxB,gFACE;QAAA,iFACE;QAAA,iFACE;QAAA,6EAAmC;QACrC,4DAAc;QACd,+EACE;QAAA,oEACF;QAAA,4DAAY;QACd,4DAAc;QAChB,4DAAa;QAGb,8EACE;QAAA,6EACE;QAAA,2EACE;QAAA,8EACE;QAAA,2EAAU;QAAA,iEAAI;QAAA,4DAAU;QAC1B,4DAAU;QAEV,2EACE;QAAA,8EACE;QAAA,gFACE;QAAA,wEACF;QAAA,4DAAY;QACZ,2EAKa;QACf,4DAAU;QACZ,4DAAU;QAEV,2EACE;QAAA,2EACE;QAAA,gFACE;QAAA,uEACF;QAAA,4DAAY;QACZ,4EAA2G;QAC7G,4DAAU;QACZ,4DAAU;QAEV,2EACE;QAAA,+EACE;QAAA,gFACE;QAAA,0EACF;QAAA,4DAAY;QACZ,4EACY;QACd,4DAAU;QACZ,4DAAU;QAEV,2EACE;QAAA,2EACE;QAAA,gFACE;QAAA,2EACF;QAAA,4DAAY;QACZ,4EACY;QACd,4DAAU;QACZ,4DAAU;QAEV,wFAAgF;QAChF,2EACE;QAAA,2EACE;QAAA,0GACE;QAUJ,4DAAU;QACZ,4DAAU;QAEV,2EACE;QAAA,2EACE;QAAA,0GACE;QASJ,4DAAU;QACZ,4DAAU;QACV,sMACE;QAIJ,4DAAW;QACb,4DAAO;QACT,4DAAc;;;QApGF,6EAAoB;QAaZ,0DAAyB;QAAzB,sFAAyB;QAiDhB,2DAA+B;QAA/B,4FAA+B;QAG7C,0DAA+F;QAA/F,gKAA+F;QAgB/F,0DAAoD;QAApD,+FAAoD;;6FDhEtD,WAAW;cALvB,uDAAS;eAAC;gBACT,QAAQ,EAAE,aAAa;gBACvB,WAAW,EAAE,qBAAqB;gBAClC,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC","file":"event-booking-pages-booking-booking-module-es2015.js","sourcesContent":["import { Validators } from \"@angular/forms\";\nimport { FormControl } from \"@angular/forms\";\n\nexport interface Person extends PersonFormValue {}\n\nexport interface PersonFormValue {\n  /**\n   * Only known after INSERT returned\n   */\n  randomUUID?: string;\n\n  personFirstName: string;\n  personLastName: string;\n  personPhoneNumber: string;\n  personEmailAddress: string;\n\n  isDeclarationChecked?: boolean;\n}\n\n// tslint:disable: no-magic-numbers\nexport class PersonForm {\n  /**\n   * Only known after INSERT returned\n   */\n  randomUUID?: FormControlTyped<string>;\n\n  personFirstName: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(1)]);\n  personLastName: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(1)]);\n  personPhoneNumber: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(10), Validators.pattern(/^[+)(\\d)]+$/)]);\n  personEmailAddress: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(4), Validators.email]);\n  isDeclarationChecked?: FormControlTyped<boolean> =  new FormControl(\"\", [Validators.requiredTrue]);\n\n}\n\ntype KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nconst personFormKeys: KeysEnum<PersonForm> = {\n  randomUUID: true,\n  personFirstName: true,\n  personLastName: true,\n  personPhoneNumber: true,\n  personEmailAddress: true,\n  isDeclarationChecked: true\n};\n\n// tslint:disable-next-line: no-unnecessary-class\nexport class PersonFormFactory {\n  static createPersonForm(): PersonForm {\n    return new PersonForm();\n  }\n\n  /*\n  static createEditPersonForm(copyPerson: Partial<PersonFormValue>): Required<PersonForm> {\n    // Expect no duplicates from Object.keys....\n    const foundProperties: string[] = Object.keys(copyPerson);\n\n    // - TODO: Find a DRY method\n    const personKeys: (keyof PersonFormValue)[] = [\n      \"randomUUID\",\n      \"personFirstName\",\n      \"personLastName\",\n      \"personPhoneNumber\",\n      \"personEmailAddress\"\n    ];\n    const personKeysTuple: [\"personFirstName\", \"personLastName\", \"personPhoneNumber\", \"personEmailAddress\"] = [\n      \"personFirstName\",\n      \"personLastName\",\n      \"personPhoneNumber\",\n      \"personEmailAddress\"\n    ];\n\n    const remainingProperties: string[] = foundProperties.forEach();\n\n    const {\n      personFirstName,\n      personLastName,\n      personPhoneNumber,\n      personEmailAddress,\n    }: PersonForm = PersonFormFactory.createPersonForm();\n\n    return { personFirstName, personLastName, personPhoneNumber, personEmailAddress };\n  }\n   */\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BookingPage } from './booking.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BookingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BookingPageRoutingModule {}\n","import { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { SharedModule } from \"./../../../../shared/modules/shared.module\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { BookingPageRoutingModule } from \"./booking-routing.module\";\n\nimport { BookingPage } from \"./booking.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SharedModule,\n    MatCheckboxModule,\n    BookingPageRoutingModule\n  ],\n  declarations: [BookingPage]\n})\nexport class BookingPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroupDirective } from \"@angular/forms\";\nimport { ToastController } from \"@ionic/angular\";\nimport { FetchResult } from \"apollo-link\";\nimport { PersonFormFactory, PersonFormValue } from \"../../models/person-form\";\nimport { AddUpsertPersonToSimpleBooking } from \"../../services/__generated__/AddUpsertPersonToSimpleBooking\";\nimport { Person } from \"./../../models/person-form\";\nimport { getLatestPersonCountFromQuerySubscription, BookingService } from \"./../../services/booking.service\";\n\nconst ENGLISH_EVENT_UUID: string = \"f883134b-661a-4388-b677-582bc2ea39aa\";\nconst CHINESE_EVENT_UUID: string = \"667c1a54-3c59-4eff-a507-b55a80094249\";\nconst DEFAULT_LOADING_TOAST_MESSAGE_TEXT = \"Loading...\";\n@Component({\n  selector: \"app-booking\",\n  templateUrl: \"./booking.page.html\",\n  styleUrls: [\"./booking.page.scss\"]\n})\nexport class BookingPage implements OnInit {\n  selectedEventUUID: string = \"\";\n  selectedEventName: string = \"\";\n  // - FIXME: Hard coded values.\n  readonly bookingChineseUUID: string = \"445538f0-e22e-4568-acf8-9bc5bba3ceb6\";\n  readonly bookingEnglishUUID: string = \"81508052-8691-4ff4-a3ef-c36bf7fccc88\";\n  readonly eventChineseUUID: string = CHINESE_EVENT_UUID;\n  readonly eventEnglishUUID: string = ENGLISH_EVENT_UUID;\n  bookingForm: FormGroupTyped<PersonFormValue>;\n\n  // - FIXME: Incorporate database check trigger constraint before insert.\n  latestPersonsCountEnglish: Observable<number>;\n  latestPersonsCountChinese: Observable<number>;\n\n  englishCount: number;\n  chineseCount: number;\n\n  latestPersonsEnglishCap: number = 49;\n  latestPersonsChineseCap: number = 49;\n\n  get isEnglishCountCappedLocked(): boolean {\n    return this.englishCount >= this.latestPersonsEnglishCap;\n  }\n\n  get isChineseCountCappedLocked(): boolean {\n    return this.chineseCount >= this.latestPersonsChineseCap;\n  }\n\n  get isRegistrationAllowedEnglishCountBelowCap(): boolean {\n    return !this.isEnglishCountCappedLocked;\n  }\n\n  get isRegistrationAllowedChineseCountBelowCap(): boolean {\n    return !this.isChineseCountCappedLocked;\n  }\n  constructor(\n    public bookingService: BookingService,\n    public formBuilder: FormBuilder,\n    public toastController: ToastController\n  ) {\n    const bookingForm: FormGroupTyped<Person> = formBuilder.group(\n      PersonFormFactory.createPersonForm()\n    ) as FormGroupTyped<Person>;\n    this.bookingForm = bookingForm;\n  }\n  ngOnInit(): void {\n    console.log(\"BookingPage -> ngOnInit\");\n\n    const latestCountChineseDefault: Observable<number> = getLatestPersonCountFromQuerySubscription(\n      this.bookingService.getNumberOfPersonBookingsForEvent()\n    );\n    this.latestPersonsCountChinese = latestCountChineseDefault;\n    latestCountChineseDefault.subscribe((num) => {\n      this.chineseCount = num;\n    });\n\n    const latestCountEnglish: Observable<number> = getLatestPersonCountFromQuerySubscription(\n      this.bookingService.getNumberOfPersonBookingsForEvent(this.eventEnglishUUID)\n    );\n    this.latestPersonsCountEnglish = latestCountEnglish;\n\n    latestCountEnglish.subscribe((a) => (this.englishCount = a));\n  }\n\n  clickSubmitForm(\n    pickHardcodedBookingUUID: string = \"445538f0-e22e-4568-acf8-9bc5bba3ceb6\",\n    form: FormGroupDirective,\n    event: Event,\n    personBookingForm: FormGroupTyped<Person> = this.bookingForm,\n    bookingService: BookingService = this.bookingService\n  ): void {\n    // Temporarily mutate the count up while waiting for query\n    // Helps deter edge case of clicking 9 submissions at a row while lagging and suddenly filling in 7 at once over the limit.\n    // The real-time subscription will still reset to the latest values within milliseconds.\n    pickHardcodedBookingUUID === this.bookingEnglishUUID ? (this.englishCount += 1) : (this.chineseCount += 1);\n    console.log(\"BookingPage:: clickSubmitForm() -> form\", form, event, personBookingForm);\n\n    const person: Person = personBookingForm.value;\n\n    if (person.personFirstName === \"\") {\n      this.presentToast(`Invalid inputs detected`).catch();\n\n      return;\n    }\n    // Set form invalid intermediate state and then finally clear it on returned success.\n    form.control.setErrors({ invalid: \"Saving form...\" });\n\n    // INSERT\n    const insertPersonReturning: Observable<FetchResult<\n      AddUpsertPersonToSimpleBooking\n    >> = bookingService.addPersonToBookingByUUID(pickHardcodedBookingUUID, person);\n\n    insertPersonReturning.subscribe(\n      (personBookingResult: FetchResult<AddUpsertPersonToSimpleBooking>) => {\n        console.log(\"BookingPage -> clickSubmitForm -> personBookingResult\", personBookingResult);\n        this.presentToast(\n          `Successfully saved booking ${personBookingResult?.data?.insert_Person?.returning?.[0]?.personFirstName}`\n        ).catch();\n        /* ${JSON.stringify(personBookingResult?.data?.insert_Person?.returning)} */\n\n        // Success quickly reset the form to prevent duplicates.\n        // Maybe should show the preview of the names...\n        // Already shows count.\n        this.resetRecreateForm();\n      },\n      (error) => {\n        this.presentToast(`Error saving ${JSON.stringify(error)}`).catch();\n      }\n    );\n  }\n\n  resetRecreateForm(): void {\n    const bookingForm: FormGroupTyped<Person> = this.formBuilder.group(\n      PersonFormFactory.createPersonForm()\n    ) as FormGroupTyped<Person>;\n    this.bookingForm = bookingForm;\n  }\n\n  async presentToast(\n    msg: string = DEFAULT_LOADING_TOAST_MESSAGE_TEXT,\n    toastController: ToastController = this.toastController\n  ): Promise<void> {\n    const toast: HTMLIonToastElement = await toastController.create({\n      message: msg,\n      duration: 3500,\n      animated: true,\n      translucent: true\n    });\n\n    // tslint:disable-next-line: newline-per-chained-call\n    const toasted: Promise<void> = toast.present().then(() => {\n      console.log(\"Toast presented\");\n    });\n\n    return toasted;\n  }\n\n  compare(count: number, cap: number): boolean {\n    return count < cap;\n  }\n}\n","<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"cobaltblue\">\n    <ion-buttons slot=\"start\">\n      <app-home-button></app-home-button>\n    </ion-buttons>\n    <ion-title style=\"padding-inline-start: 0.25em;\">\n      Booking\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<!-- (ngSubmit)=\"clickSubmitForm(undefined, f, $event) -->\n<ion-content>\n  <form #f=\"ngForm\" [formGroup]=\"bookingForm\">\n    <ion-grid>\n      <ion-row style=\"color: gray;\">\n        <ion-col> Test</ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col col-12 col-sm-9 col-md-6 col-lg-4 col-xl-3>\n          <ion-label position=\"floating\">\n            First name\n          </ion-label>\n          <ion-input\n            formControlName=\"personFirstName\"\n            type=\"text\"\n            placeholder=\"First name for registration, check in and contact-tracing purposes\"\n            required\n          ></ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <ion-label position=\"floating\">\n            Last name\n          </ion-label>\n          <ion-input formControlName=\"personLastName\" type=\"text\" placeholder=\"Your last name\" required> </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col sizeXl=\"2\" sizeLg=\"2.2\" sizeMd=\"2.5\" sizeSm=\"4\" sizeXs=\"5.6\">\n          <ion-label position=\"floating\">\n            Phone number\n          </ion-label>\n          <ion-input formControlName=\"personPhoneNumber\" type=\"tel\" placeholder=\"0412345678\" size=\"12\" required>\n          </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <ion-label position=\"floating\">\n            Email address\n          </ion-label>\n          <ion-input formControlName=\"personEmailAddress\" type=\"text\" placeholder=\"info@example.com\" required>\n          </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <app-covid-declaration [eventName]=\"selectedEventName\"> </app-covid-declaration>\n      <ion-row>\n        <ion-col>\n          <div *ngIf=\"isRegistrationAllowedEnglishCountBelowCap && isRegistrationAllowedChineseCountBelowCap;\">\n            <ion-button type=\"button\" color=\"cobaltblue\" [disabled]=\"bookingForm.invalid\">\n              <ion-icon name=\"person-add-outline\"></ion-icon>\n              Add Person to Booking\n            </ion-button>\n            <!-- - BUG: Workaround to get implicit enter submit form. -->\n            <button type=\"button\" mat-button color=\"primary\" [disabled]=\"bookingForm.invalid\" hidden>\n              <ion-icon name=\"document-text\"></ion-icon>\n              Add Person (enter)\n            </button>\n          </div>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <div *ngIf=\"latestPersonsCountEnglish; else maxedChinese\">\n            <ion-button\n              type=\"button\"\n              color=\"brightnavyblue\"\n              [disabled]=\"bookingForm.invalid\"\n              (click)=\"clickSubmitForm(selectedEventUUID, f, $event)\"\n            >\n              Register for Sunday service (Chinese hall)\n            </ion-button>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ng-template #maxedChinese>\n        <ion-text color=\"warning\">\n          Registrations reached maximum capacity\n        </ion-text>\n      </ng-template>\n    </ion-grid>\n  </form>\n</ion-content>\n"],"sourceRoot":"webpack:///"}