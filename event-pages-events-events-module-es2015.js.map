{"version":3,"sources":["./src/app/event/pages/events/events-routing.module.ts","./src/app/event/pages/events/events.module.ts","./src/app/event/pages/events/events.page.ts","./src/app/event/pages/events/events.page.html","./src/app/events/services/event.service.ts"],"names":[],"mappings":"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","file":"event-pages-events-events-module-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EventsPage } from './events.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EventsPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EventsPageRoutingModule {}\n","import { SharedModule } from \"./../../../shared/modules/shared.module\";\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EventsPageRoutingModule } from './events-routing.module';\n\nimport { EventsPage } from './events.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    EventsPageRoutingModule\n  ],\n  declarations: [EventsPage]\n})\nexport class EventsPageModule {}\n","import { Component, OnInit } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { FetchResult } from \"apollo-link\";\nimport { of, Observable } from \"rxjs\";\nimport { filter, map } from \"rxjs/operators\";\nimport { Event_insert_input } from \"./../../../../../__generated__/globalTypes\";\nimport { EventService } from \"./../../../events/services/event.service\";\nimport { CreateEvents } from \"./../../../events/services/__generated__/CreateEvents\";\nimport { GetAllEvents, GetAllEvents_Event } from \"./../../../events/services/__generated__/GetAllEvents\";\nimport { CONSOLE_COLOUR } from \"./../../../globals/globals\";\nimport { BookingService } from \"./../../booking/services/booking.service\";\n\n@Component({\n  selector: \"app-events\",\n  templateUrl: \"./events.page.html\",\n  styleUrls: [\"./events.page.scss\"]\n})\nexport class EventsPage implements OnInit {\n  upcomingEvents: Observable<GetAllEvents_Event[]> = of([]);\n\n  constructor(public router: Router, public eventService: EventService, public bookingService: BookingService) {\n    console.log(\"EventsPage:: constructor\");\n  }\n  ngOnInit(): void {\n    console.log(\"EventsPage:: ngOnInit\");\n\n    this.upcomingEvents = this.getLatestEvents();\n  }\n\n  getLatestEvents(eventService: EventService = this.eventService): Observable<GetAllEvents_Event[]> {\n    console.log(\"EventsPage:: getLatestEvents\");\n\n    const currentEvents: Observable<FetchResult<GetAllEvents>> = eventService.getEvents();\n\n    const upcomingEvents: Observable<GetAllEvents_Event[]> = currentEvents.pipe(\n      map((eventsResult: FetchResult<GetAllEvents>) => {\n        const {\n          data: { Event: events },\n          context,\n          errors,\n          extensions\n        }: FetchResult<GetAllEvents> = eventsResult;\n        console.log(\"EventsPage -> eventsResult\", eventsResult);\n\n        if (errors?.length > 0) {\n          return undefined;\n        }\n        console.log(\"%c EventsPage:: subscribeLatestEvents -> events\", CONSOLE_COLOUR);\n\n        return eventsResult.data.Event;\n      }),\n      filter(\n        (eventData: GetAllEvents_Event[]) =>\n          eventData !== undefined &&\n          eventData[0]?.EventRooms !== undefined &&\n          eventData[0]?.EventRooms[0]?.roomName !== undefined\n      )\n    );\n\n    return upcomingEvents;\n  }\n\n  // - MARK: Click events\n  clickEventItem(tap: MouseEvent, event: GetAllEvents_Event, router: Router = this.router): void {\n    console.log(\"EventsPage -> eventItemClick -> eventItemClick\", tap);\n    console.log(\"EventsPage -> eventItemClick -> event\", event.randomUUID);\n  }\n\n  clickTestButton(event: Event): void {\n    console.log(\"EventsPage -> testButton -> event\", event);\n    this.seedEvents();\n  }\n  seedEvents(eventService: EventService = this.eventService): void {\n    const seedEventInputObjects: Event_insert_input[] = eventService.getSeedEventInputObjects();\n    console.log(\"EventsPage -> seedEvents -> getSeedEventInputObjects\", seedEventInputObjects);\n\n    const createdEventsReturning: Observable<FetchResult<CreateEvents>> = eventService.createEvents(\n      seedEventInputObjects\n    );\n\n    createdEventsReturning.subscribe((createdEventsResult: FetchResult<CreateEvents>) => {\n      console.log(\"EventsPage -> seedEvents -> createdEventsResult\", createdEventsResult);\n    });\n  }\n}\n","<app-custom-header pageTitle=\"COVIDSafe Events\"></app-custom-header>\n\n<ion-content>\n  <ion-list>\n    <ion-list-header>Upcoming events</ion-list-header>\n    <ion-item-sliding *ngFor=\"let event of upcomingEvents | async\">\n      <ion-item-options>\n        <ion-item-option color=\"danger\">Check </ion-item-option>\n      </ion-item-options>\n      <ion-item button (click)=\"clickEventItem($event, event)\">\n        <ion-avatar slot=\"start\">\n          <img\n            src=\"/assets/images/emp-cmca-logo-small-172x172-placeholder.jpg\"\n            alt=\"Placeholder-image-church\"\n          />\n          <!-- <ion-avatar slot=\"start\">\n          <img\n            src=\"https://scontent.fbne5-1.fna.fbcdn.net/v/t1.0-1/p720x720/40265936_232195504087460_8302723750890045440_o.jpg?_nc_cat=111&_nc_sid=dbb9e7&_nc_ohc=YYAttiKbqXQAX9KJBTk&_nc_ht=scontent.fbne5-1.fna&_nc_tp=6&oh=ce562445bd0182928dd2c9a086194140&oe=5F46228C\"\n            alt=\"Placeholder-image-church\"\n        /> -->\n        </ion-avatar>\n        <ion-label>\n          <h2>{{event?.eventName}}</h2>\n          <h3>{{event?.EventRooms[0]?.roomName}}</h3>\n          <p>\n            {{event.eventStartDateTime | date: 'EEEE\\',\\' dd MMM HH:mm'}} – {{event.eventEndDateTime | date: 'HH:mm'}}\n          </p>\n        </ion-label>\n      </ion-item>\n    </ion-item-sliding>\n  </ion-list>\n  <!-- <ion-button (click)=\"clickTestButton($event)\"> </ion-button> -->\n</ion-content>\n","import { WeekDay } from \"@angular/common\";\nimport { Injectable } from \"@angular/core\";\nimport { Apollo } from \"apollo-angular\";\nimport { MutationOptions, SubscriptionOptions } from \"apollo-client\";\nimport { FetchResult } from \"apollo-link\";\nimport { DocumentNode } from \"graphql\";\nimport gql from \"graphql-tag\";\nimport { getLocaleMidnightDateTime } from \"src/app/globals/globals\";\nimport {\n  getMillisecondsFromDays,\n  getPostgresTimestamptzTstzRange,\n  getRecurringEventBookingDateTime,\n  nextDayDateWithTime as getNextDayDateWithTime\n} from \"../../shared/utilities/date-utilities\";\nimport {\n  Event_insert_input,\n  Organiser_constraint,\n  Organiser_update_column,\n  EventRoom_constraint,\n  EventRoom_update_column,\n  Room_constraint,\n  Room_update_column,\n  Venue_constraint,\n  Venue_update_column\n} from \"./../../../../__generated__/globalTypes\";\nimport { EventBookingDateTimeRange } from \"./../../shared/utilities/date-utilities\";\nimport { CreateEvent, CreateEventVariables } from \"./__generated__/CreateEvent\";\nimport { CreateEvents, CreateEventsVariables } from \"./__generated__/CreateEvents\";\nimport { GetAllEvents, GetAllEventsVariables } from \"./__generated__/GetAllEvents\";\n\nconst enum EventRoomVenueDetails {\n  WholeChurchVenue = \"9cb826dc-fcf8-406e-8b01-f4eba15dfcc6\",\n  WholeChurchVenueDescription = \"Eight Mile Plains Chinese Methodist Church\",\n  EnglishHallName = \"English hall\",\n  ChineseHallName = \"Chinese hall\",\n  EnglishHallDescription = \"English hall for live stream and in-person services\",\n  ChineseHallDescription = \"Chinese main hall for live stream and in-person services\"\n}\nconst GET_ALL_EVENTS: DocumentNode = gql`\n  # Get all future events.\n  # Default just in case dumb hasura behaviour doesn't return EventRooms but somehow returns Events depending on presence of comparison exp\n  subscription GetAllEvents($eventEndDateTimeGreaterThanEqual: timestamptz = \"2020-07-28\") {\n    Event(where: { eventEndDateTime: { _gte: $eventEndDateTimeGreaterThanEqual } }, limit: 20) {\n      eventName\n      eventDescription\n      eventStartDateTime\n      eventEndDateTime\n      bookingAvailableStartDateTime\n      bookingAvailableEndDateTime\n      randomUUID\n      updated_at\n      EventRooms {\n        roomName\n        eventRoomUUID\n        eventRoomDetails\n      }\n    }\n  }\n`;\n\n// - FIXME: Placeholders\nconst CREATE_EVENT: DocumentNode = gql`\n  mutation CreateEvent($eventInsertObject: Event_insert_input! = {}) {\n    insert_Event_one(object: $eventInsertObject) {\n      randomUUID\n      bookingAvailableStartDateTime\n      bookingAvailableEndDateTime\n      eventStartDateTime\n      eventEndDateTime\n      eventDateTimeRange\n      bookingAvailabilityDateTimeRange\n      eventName\n      eventTopic\n      eventCategory\n      eventCapacity\n      eventDescription\n      eventMedium\n    }\n  }\n`;\nconst ORGANISER_UUID: string = \"b669fc76-3130-4c4e-a04e-49e9f067ea9c\";\n\nconst CREATE_EVENTS: DocumentNode = gql`\n  mutation CreateEvents(\n    $eventInsertObjects: [Event_insert_input!]! = [\n      {\n        EventSeries: { data: { eventSeriesDetails: \"Sunday service (English)\", eventSeriesName: \"Sunday worship\" } }\n        Organiser: { data: { randomUUID: \"b669fc76-3130-4c4e-a04e-49e9f067ea9c\" } }\n      }\n    ]\n  ) {\n    insert_Event(objects: $eventInsertObjects) {\n      affected_rows\n      returning {\n        eventName\n        eventCapacity\n        eventStartDateTime\n        eventEndDateTime\n        bookingAvailableStartDateTime\n        bookingAvailableEndDateTime\n      }\n    }\n  }\n`;\n\n/* const CREATE_EVENTS_BY_ORGANISER: DocumentNode; */\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class EventService {\n  constructor(public apollo: Apollo) {\n    console.log(\"EventService -> constructor \");\n  }\n\n  /**\n   * Get upcoming events for users to book into and pre-register.\n   * @param currentGivenDate Defaulted to locale midnight to aid Hasura query/subscription caching all users.\n   */\n  getEvents(\n    currentGivenDate: Date = getLocaleMidnightDateTime(),\n    apollo: Apollo = this.apollo\n  ): Observable<FetchResult<GetAllEvents>> {\n    /* const pastEventEndDateThreshold: Date = getPastEventDateThreshold(currentGivenDate); */\n    const baseEventEndDateThresholdShouldBeGreaterThan: Date = currentGivenDate;\n\n    const variables: GetAllEventsVariables = {\n      eventEndDateTimeGreaterThanEqual: baseEventEndDateThresholdShouldBeGreaterThan\n    };\n    const options: SubscriptionOptions<GetAllEventsVariables> = {\n      query: GET_ALL_EVENTS,\n      fetchPolicy: \"cache-first\",\n      variables\n    };\n\n    const events: Observable<FetchResult<GetAllEvents>> = apollo.subscribe<GetAllEvents, GetAllEventsVariables>(\n      options\n    );\n\n    return events;\n  }\n\n  /**\n   * Get created seed events for Sunday recurring.\n   * Once-off.\n   * Other organisers should be able to manage their group weekly recurring events through organiser creation flow.\n   */\n  getSeedEventInputObjects(): Event_insert_input[] {\n    // tslint:disable: no-magic-numbers\n    const sundayService9AMStart: Date = getNextDayDateWithTime(WeekDay.Sunday, 9, 0);\n    const sundayService1030AMEnd: Date = getNextDayDateWithTime(WeekDay.Sunday, 10, 30);\n    const sundayServiceBookingStart: Date = getNextDayDateWithTime(WeekDay.Wednesday, 0, 0);\n    const sundayServiceBookingEnd: Date = getNextDayDateWithTime(WeekDay.Sunday, 23, 59, 59, 999);\n    // tslint:enable: no-magic-numbers\n\n    const recurringDates: EventBookingDateTimeRange[] = getRecurringEventBookingDateTime(\n      sundayService9AMStart,\n      sundayService1030AMEnd,\n      sundayServiceBookingStart,\n      sundayServiceBookingEnd\n    );\n    console.log(\"EventService -> getSeedEventInputObjects -> recurringDates\", recurringDates);\n\n    const eventName: string = \"Sunday service\";\n    const eventCapacity: number = 40;\n    const eventDescription: string = \"Description of community event\";\n    const eventCategory: string = \"Church\";\n\n    const chineseEventName: string = \"主日崇拜\";\n\n    const eventTuplesConcurrent: [Event_insert_input, Event_insert_input][] = recurringDates.map(\n      ({\n        eventStartEndDateTime: {\n          startDateTime: eventStart,\n          endDateTime: eventEnd,\n          startEndDateTimeRangeTstzRangeText: eventTstzRange\n        },\n        bookingStartEndDateTime: {\n          startDateTime: bookingStart,\n          endDateTime: bookingEnd,\n          startEndDateTimeRangeTstzRangeText: bookingTstzRange\n        }\n      }: EventBookingDateTimeRange) => {\n        const englishEventInsertObject: Event_insert_input = getCreateEventObjectInput(\n          EventRoomVenueDetails.EnglishHallName,\n          EventRoomVenueDetails.EnglishHallDescription,\n          bookingStart,\n          bookingEnd,\n          bookingTstzRange,\n          eventStart,\n          eventEnd,\n          eventTstzRange,\n          eventName,\n          eventCapacity,\n          eventDescription,\n          eventCategory\n        );\n        const chineseEventObjectInput: Event_insert_input = getCreateEventObjectInput(\n          EventRoomVenueDetails.ChineseHallName,\n          EventRoomVenueDetails.ChineseHallDescription,\n          bookingStart,\n          bookingEnd,\n          bookingTstzRange,\n          eventStart,\n          eventEnd,\n          eventTstzRange,\n          chineseEventName,\n          eventCapacity,\n          eventDescription,\n          eventCategory\n        );\n\n        const bothEvents: [Event_insert_input, Event_insert_input] = [\n          englishEventInsertObject,\n          chineseEventObjectInput\n        ];\n\n        return bothEvents;\n      }\n    );\n    const eventInsertObjects: Event_insert_input[] = ([] as Event_insert_input[]).concat(...eventTuplesConcurrent);\n\n    return eventInsertObjects;\n  }\n  createEvents(\n    eventInsertObjects: Event_insert_input[],\n    apollo: Apollo = this.apollo\n  ): Observable<FetchResult<CreateEvents>> {\n    const variables: CreateEventsVariables = { eventInsertObjects };\n\n    const options: MutationOptions<CreateEvents, CreateEventsVariables> = {\n      mutation: CREATE_EVENTS,\n      variables\n    };\n\n    // Create recurring dates and then map the array into an events array? double iteration but easier to handle\n\n    const createdEventsReturning: Observable<FetchResult<CreateEvents>> = apollo.mutate(options);\n\n    return createdEventsReturning;\n  }\n\n  createEvent(apollo: Apollo = this.apollo): Observable<FetchResult<CreateEvent>> {\n    const baseDateNow: Date = new Date();\n    const bookingAvailableStartDateTime: Date = new Date(baseDateNow.getTime() - getMillisecondsFromDays(2));\n    const bookingAvailableEndDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(7));\n    const eventStartDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(9));\n    const eventEndDateTime: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(10));\n    const endDate: Date = new Date(baseDateNow.getTime() + getMillisecondsFromDays(10));\n\n    const startTimeRange: string = \"2020-07-22T09:27:53.667Z\";\n    const endTimeRange: string = \"2020-08-14T09:27:53.667Z\";\n    const placeholderDateTimeRange: string = `('${startTimeRange}', '${endTimeRange}']`;\n    const eventInsertObject: Event_insert_input = getCreateEventObjectInput(\n      EventRoomVenueDetails.EnglishHallName,\n      EventRoomVenueDetails.EnglishHallDescription,\n      bookingAvailableStartDateTime,\n      bookingAvailableEndDateTime,\n      getPostgresTimestamptzTstzRange(bookingAvailableStartDateTime, bookingAvailableEndDateTime),\n      eventStartDateTime,\n      eventEndDateTime,\n      getPostgresTimestamptzTstzRange(eventStartDateTime, eventEndDateTime)\n    );\n\n    console.log(\"EventService -> constructor -> eventInsertObject\", eventInsertObject);\n\n    const variables: CreateEventVariables = {\n      eventInsertObject\n    };\n    const createEventReturning: Observable<FetchResult<CreateEvent>> = apollo.mutate<CreateEvent, CreateEventVariables>(\n      {\n        mutation: CREATE_EVENT,\n        variables\n      }\n    );\n\n    return createEventReturning;\n  }\n}\n\nexport function getCreateEventObjectInput(\n  roomName: EventRoomVenueDetails.ChineseHallName | EventRoomVenueDetails.EnglishHallName,\n  eventRoomDetails: EventRoomVenueDetails.ChineseHallDescription | EventRoomVenueDetails.EnglishHallDescription,\n  bookingAvailableStartDateTime: Date,\n  bookingAvailableEndDateTime: Date,\n  bookingAvailableTstzRange: string,\n  eventStartDateTime: Date,\n  eventEndDateTime: Date,\n  eventStartEndTstzRange: string,\n  eventName: string = \"Sunday service\",\n  eventCapacity: number = 40,\n  eventDescription: string = \"Description of community event\",\n  eventCategory: string = \"Church\",\n  organiserUUID: string = ORGANISER_UUID\n): Event_insert_input {\n  return {\n    bookingAvailableStartDateTime,\n    bookingAvailableEndDateTime,\n    bookingAvailabilityDateTimeRange: bookingAvailableTstzRange,\n    eventStartDateTime,\n    eventEndDateTime,\n    eventDateTimeRange: eventStartEndTstzRange,\n    eventName,\n    eventTopic: \"Topic\",\n    eventMedium: \"In-person\",\n    eventCategory,\n    eventCapacity,\n    eventDescription,\n    Organiser: {\n      data: {\n        randomUUID: organiserUUID,\n        organiserDetails: \"\"\n        /* organiserDetails: \"anonymous\", */\n        /*\n        User: {\n          data: { username: \"anonymous\", emailAddress: \"anonymous@anonymous\" },\n          on_conflict: {\n            constraint: User_constraint.User_username_key,\n            update_columns: [User_update_column.updated_at]\n          }\n        }\n         */\n      },\n      on_conflict: {\n        constraint: Organiser_constraint.Organiser_randomUUID_key,\n        update_columns: [Organiser_update_column.updated_at]\n      }\n    },\n    EventRooms: {\n      data: [\n        {\n          eventRoomDetails,\n          Room: {\n            data: {\n              roomName,\n              roomType: \"Hall\",\n              roomCapacity: 49,\n              Venue: {\n                data: {\n                  venueName: EventRoomVenueDetails.WholeChurchVenueDescription,\n                  randomUUID: EventRoomVenueDetails.WholeChurchVenue\n                },\n                on_conflict: {\n                  constraint: Venue_constraint.Venue_randomUUID_key,\n                  update_columns: [Venue_update_column.updated_at]\n                }\n              }\n            },\n            on_conflict: {\n              constraint: Room_constraint.Room_venueID_roomName_key,\n              update_columns: [Room_update_column.updated_at]\n            }\n          }\n        }\n      ],\n      on_conflict: {\n        constraint: EventRoom_constraint.EventRoom_eventRoomID_eventID_roomID_venueID_roomName_event_key,\n        update_columns: [EventRoom_update_column.updated_at]\n      }\n    }\n  };\n}\n\n// Up to a certain date would require different calculation helper could still do? Probs should use a standard library.\n// Only need this function to generate the next dates.\n// Should pass in the starting date separately... and then just simple regenerate n times + 7 days\nfunction createEventsRecurring(numberOfEvents: number): Event_insert_input[] {\n  // 9am church\n  const hh: number = 9;\n  const mi: number = 0;\n  const eventStartDateTime: Date = getNextDayDateWithTime(WeekDay.Sunday);\n\n  return [];\n}\n"],"sourceRoot":"webpack:///"}