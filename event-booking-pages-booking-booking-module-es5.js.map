{"version":3,"sources":["webpack:///src/app/event/booking/models/person-form.ts","webpack:///src/app/event/booking/pages/booking/booking-routing.module.ts","webpack:///src/app/event/booking/pages/booking/booking.module.ts","webpack:///src/app/event/booking/pages/booking/booking.page.html","webpack:///src/app/event/booking/pages/booking/booking.page.ts"],"names":["PersonForm","personFirstName","required","minLength","personLastName","personPhoneNumber","pattern","personEmailAddress","email","isDeclarationChecked","requiredTrue","personFormKeys","randomUUID","PersonFormFactory","routes","path","component","BookingPageRoutingModule","forChild","imports","exports","BookingPageModule","declarations","ENGLISH_EVENT_UUID","CHINESE_EVENT_UUID","DEFAULT_LOADING_TOAST_MESSAGE_TEXT","BookingPage","bookingService","formBuilder","toastController","selectedEventUUID","selectedEventName","bookingChineseUUID","bookingEnglishUUID","eventChineseUUID","eventEnglishUUID","latestPersonsEnglishCap","latestPersonsChineseCap","bookingForm","group","createPersonForm","console","log","latestCountChineseDefault","getNumberOfPersonBookingsForEvent","latestPersonsCountChinese","subscribe","num","chineseCount","latestCountEnglish","latestPersonsCountEnglish","a","englishCount","pickHardcodedBookingUUID","form","event","personBookingForm","person","value","presentToast","control","setErrors","invalid","insertPersonReturning","addPersonToBookingByUUID","personBookingResult","data","insert_Person","returning","resetRecreateForm","error","JSON","stringify","msg","create","message","duration","animated","translucent","toast","toasted","present","then","count","cap","isEnglishCountCappedLocked","isChineseCountCappedLocked","selector","templateUrl","styleUrls"],"mappings":"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","file":"event-booking-pages-booking-booking-module-es5.js","sourcesContent":["import { Validators } from \"@angular/forms\";\nimport { FormControl } from \"@angular/forms\";\n\nexport interface Person extends PersonFormValue {}\n\nexport interface PersonFormValue {\n  /**\n   * Only known after INSERT returned\n   */\n  randomUUID?: string;\n\n  personFirstName: string;\n  personLastName: string;\n  personPhoneNumber: string;\n  personEmailAddress: string;\n\n  isDeclarationChecked?: boolean;\n}\n\n// tslint:disable: no-magic-numbers\nexport class PersonForm {\n  /**\n   * Only known after INSERT returned\n   */\n  randomUUID?: FormControlTyped<string>;\n\n  personFirstName: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(1)]);\n  personLastName: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(1)]);\n  personPhoneNumber: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(10), Validators.pattern(/^[+)(\\d)]+$/)]);\n  personEmailAddress: FormControlTyped<string> = new FormControl(\"\", [Validators.required, Validators.minLength(4), Validators.email]);\n  isDeclarationChecked?: FormControlTyped<boolean> =  new FormControl(\"\", [Validators.requiredTrue]);\n\n}\n\ntype KeysEnum<T> = { [P in keyof Required<T>]: true };\n\nconst personFormKeys: KeysEnum<PersonForm> = {\n  randomUUID: true,\n  personFirstName: true,\n  personLastName: true,\n  personPhoneNumber: true,\n  personEmailAddress: true,\n  isDeclarationChecked: true\n};\n\n// tslint:disable-next-line: no-unnecessary-class\nexport class PersonFormFactory {\n  static createPersonForm(): PersonForm {\n    return new PersonForm();\n  }\n\n  /*\n  static createEditPersonForm(copyPerson: Partial<PersonFormValue>): Required<PersonForm> {\n    // Expect no duplicates from Object.keys....\n    const foundProperties: string[] = Object.keys(copyPerson);\n\n    // - TODO: Find a DRY method\n    const personKeys: (keyof PersonFormValue)[] = [\n      \"randomUUID\",\n      \"personFirstName\",\n      \"personLastName\",\n      \"personPhoneNumber\",\n      \"personEmailAddress\"\n    ];\n    const personKeysTuple: [\"personFirstName\", \"personLastName\", \"personPhoneNumber\", \"personEmailAddress\"] = [\n      \"personFirstName\",\n      \"personLastName\",\n      \"personPhoneNumber\",\n      \"personEmailAddress\"\n    ];\n\n    const remainingProperties: string[] = foundProperties.forEach();\n\n    const {\n      personFirstName,\n      personLastName,\n      personPhoneNumber,\n      personEmailAddress,\n    }: PersonForm = PersonFormFactory.createPersonForm();\n\n    return { personFirstName, personLastName, personPhoneNumber, personEmailAddress };\n  }\n   */\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BookingPage } from './booking.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: BookingPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class BookingPageRoutingModule {}\n","import { MatCheckboxModule } from \"@angular/material/checkbox\";\nimport { SharedModule } from \"./../../../../shared/modules/shared.module\";\nimport { NgModule } from \"@angular/core\";\nimport { CommonModule } from \"@angular/common\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\nimport { IonicModule } from \"@ionic/angular\";\n\nimport { BookingPageRoutingModule } from \"./booking-routing.module\";\n\nimport { BookingPage } from \"./booking.page\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    IonicModule,\n    SharedModule,\n    MatCheckboxModule,\n    BookingPageRoutingModule\n  ],\n  declarations: [BookingPage]\n})\nexport class BookingPageModule {}\n","<ion-header [translucent]=\"true\">\n  <ion-toolbar color=\"cobaltblue\">\n    <ion-buttons slot=\"start\">\n      <app-home-button></app-home-button>\n    </ion-buttons>\n    <ion-title style=\"padding-inline-start: 0.25em;\">\n      Booking\n    </ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<!-- (ngSubmit)=\"clickSubmitForm(undefined, f, $event) -->\n<ion-content>\n  <form #f=\"ngForm\" [formGroup]=\"bookingForm\">\n    <ion-grid>\n      <ion-row style=\"color: gray;\">\n        <ion-col> Test</ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col col-12 col-sm-9 col-md-6 col-lg-4 col-xl-3>\n          <ion-label position=\"floating\">\n            First name\n          </ion-label>\n          <ion-input\n            formControlName=\"personFirstName\"\n            type=\"text\"\n            placeholder=\"First name for registration, check in and contact-tracing purposes\"\n            required\n          ></ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <ion-label position=\"floating\">\n            Last name\n          </ion-label>\n          <ion-input formControlName=\"personLastName\" type=\"text\" placeholder=\"Your last name\" required> </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col sizeXl=\"2\" sizeLg=\"2.2\" sizeMd=\"2.5\" sizeSm=\"4\" sizeXs=\"5.6\">\n          <ion-label position=\"floating\">\n            Phone number\n          </ion-label>\n          <ion-input formControlName=\"personPhoneNumber\" type=\"tel\" placeholder=\"0412345678\" size=\"12\" required>\n          </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <ion-label position=\"floating\">\n            Email address\n          </ion-label>\n          <ion-input formControlName=\"personEmailAddress\" type=\"text\" placeholder=\"info@example.com\" required>\n          </ion-input>\n        </ion-col>\n      </ion-row>\n\n      <app-covid-declaration [eventName]=\"selectedEventName\"> </app-covid-declaration>\n      <ion-row>\n        <ion-col>\n          <div *ngIf=\"isRegistrationAllowedEnglishCountBelowCap && isRegistrationAllowedChineseCountBelowCap;\">\n            <ion-button type=\"button\" color=\"cobaltblue\" [disabled]=\"bookingForm.invalid\">\n              <ion-icon name=\"person-add-outline\"></ion-icon>\n              Add Person to Booking\n            </ion-button>\n            <!-- - BUG: Workaround to get implicit enter submit form. -->\n            <button type=\"button\" mat-button color=\"primary\" [disabled]=\"bookingForm.invalid\" hidden>\n              <ion-icon name=\"document-text\"></ion-icon>\n              Add Person (enter)\n            </button>\n          </div>\n        </ion-col>\n      </ion-row>\n\n      <ion-row>\n        <ion-col>\n          <div *ngIf=\"latestPersonsCountEnglish; else maxedChinese\">\n            <ion-button\n              type=\"button\"\n              color=\"brightnavyblue\"\n              [disabled]=\"bookingForm.invalid\"\n              (click)=\"clickSubmitForm(selectedEventUUID, f, $event)\"\n            >\n              Register for Sunday service (Chinese hall)\n            </ion-button>\n          </div>\n        </ion-col>\n      </ion-row>\n      <ng-template #maxedChinese>\n        <ion-text color=\"warning\">\n          Registrations reached maximum capacity\n        </ion-text>\n      </ng-template>\n    </ion-grid>\n  </form>\n</ion-content>\n","import { Component, OnInit } from \"@angular/core\";\nimport { FormBuilder, FormGroupDirective } from \"@angular/forms\";\nimport { ToastController } from \"@ionic/angular\";\nimport { FetchResult } from \"apollo-link\";\nimport { PersonFormFactory, PersonFormValue } from \"../../models/person-form\";\nimport { AddUpsertPersonToSimpleBooking } from \"../../services/__generated__/AddUpsertPersonToSimpleBooking\";\nimport { Person } from \"./../../models/person-form\";\nimport { getLatestPersonCountFromQuerySubscription, BookingService } from \"./../../services/booking.service\";\n\nconst ENGLISH_EVENT_UUID: string = \"f883134b-661a-4388-b677-582bc2ea39aa\";\nconst CHINESE_EVENT_UUID: string = \"667c1a54-3c59-4eff-a507-b55a80094249\";\nconst DEFAULT_LOADING_TOAST_MESSAGE_TEXT = \"Loading...\";\n@Component({\n  selector: \"app-booking\",\n  templateUrl: \"./booking.page.html\",\n  styleUrls: [\"./booking.page.scss\"]\n})\nexport class BookingPage implements OnInit {\n  selectedEventUUID: string = \"\";\n  selectedEventName: string = \"\";\n  // - FIXME: Hard coded values.\n  readonly bookingChineseUUID: string = \"445538f0-e22e-4568-acf8-9bc5bba3ceb6\";\n  readonly bookingEnglishUUID: string = \"81508052-8691-4ff4-a3ef-c36bf7fccc88\";\n  readonly eventChineseUUID: string = CHINESE_EVENT_UUID;\n  readonly eventEnglishUUID: string = ENGLISH_EVENT_UUID;\n  bookingForm: FormGroupTyped<PersonFormValue>;\n\n  // - FIXME: Incorporate database check trigger constraint before insert.\n  latestPersonsCountEnglish: Observable<number>;\n  latestPersonsCountChinese: Observable<number>;\n\n  englishCount: number;\n  chineseCount: number;\n\n  latestPersonsEnglishCap: number = 49;\n  latestPersonsChineseCap: number = 49;\n\n  get isEnglishCountCappedLocked(): boolean {\n    return this.englishCount >= this.latestPersonsEnglishCap;\n  }\n\n  get isChineseCountCappedLocked(): boolean {\n    return this.chineseCount >= this.latestPersonsChineseCap;\n  }\n\n  get isRegistrationAllowedEnglishCountBelowCap(): boolean {\n    return !this.isEnglishCountCappedLocked;\n  }\n\n  get isRegistrationAllowedChineseCountBelowCap(): boolean {\n    return !this.isChineseCountCappedLocked;\n  }\n  constructor(\n    public bookingService: BookingService,\n    public formBuilder: FormBuilder,\n    public toastController: ToastController\n  ) {\n    const bookingForm: FormGroupTyped<Person> = formBuilder.group(\n      PersonFormFactory.createPersonForm()\n    ) as FormGroupTyped<Person>;\n    this.bookingForm = bookingForm;\n  }\n  ngOnInit(): void {\n    console.log(\"BookingPage -> ngOnInit\");\n\n    const latestCountChineseDefault: Observable<number> = getLatestPersonCountFromQuerySubscription(\n      this.bookingService.getNumberOfPersonBookingsForEvent()\n    );\n    this.latestPersonsCountChinese = latestCountChineseDefault;\n    latestCountChineseDefault.subscribe((num) => {\n      this.chineseCount = num;\n    });\n\n    const latestCountEnglish: Observable<number> = getLatestPersonCountFromQuerySubscription(\n      this.bookingService.getNumberOfPersonBookingsForEvent(this.eventEnglishUUID)\n    );\n    this.latestPersonsCountEnglish = latestCountEnglish;\n\n    latestCountEnglish.subscribe((a) => (this.englishCount = a));\n  }\n\n  clickSubmitForm(\n    pickHardcodedBookingUUID: string = \"445538f0-e22e-4568-acf8-9bc5bba3ceb6\",\n    form: FormGroupDirective,\n    event: Event,\n    personBookingForm: FormGroupTyped<Person> = this.bookingForm,\n    bookingService: BookingService = this.bookingService\n  ): void {\n    // Temporarily mutate the count up while waiting for query\n    // Helps deter edge case of clicking 9 submissions at a row while lagging and suddenly filling in 7 at once over the limit.\n    // The real-time subscription will still reset to the latest values within milliseconds.\n    pickHardcodedBookingUUID === this.bookingEnglishUUID ? (this.englishCount += 1) : (this.chineseCount += 1);\n    console.log(\"BookingPage:: clickSubmitForm() -> form\", form, event, personBookingForm);\n\n    const person: Person = personBookingForm.value;\n\n    if (person.personFirstName === \"\") {\n      this.presentToast(`Invalid inputs detected`).catch();\n\n      return;\n    }\n    // Set form invalid intermediate state and then finally clear it on returned success.\n    form.control.setErrors({ invalid: \"Saving form...\" });\n\n    // INSERT\n    const insertPersonReturning: Observable<FetchResult<\n      AddUpsertPersonToSimpleBooking\n    >> = bookingService.addPersonToBookingByUUID(pickHardcodedBookingUUID, person);\n\n    insertPersonReturning.subscribe(\n      (personBookingResult: FetchResult<AddUpsertPersonToSimpleBooking>) => {\n        console.log(\"BookingPage -> clickSubmitForm -> personBookingResult\", personBookingResult);\n        this.presentToast(\n          `Successfully saved booking ${personBookingResult?.data?.insert_Person?.returning?.[0]?.personFirstName}`\n        ).catch();\n        /* ${JSON.stringify(personBookingResult?.data?.insert_Person?.returning)} */\n\n        // Success quickly reset the form to prevent duplicates.\n        // Maybe should show the preview of the names...\n        // Already shows count.\n        this.resetRecreateForm();\n      },\n      (error) => {\n        this.presentToast(`Error saving ${JSON.stringify(error)}`).catch();\n      }\n    );\n  }\n\n  resetRecreateForm(): void {\n    const bookingForm: FormGroupTyped<Person> = this.formBuilder.group(\n      PersonFormFactory.createPersonForm()\n    ) as FormGroupTyped<Person>;\n    this.bookingForm = bookingForm;\n  }\n\n  async presentToast(\n    msg: string = DEFAULT_LOADING_TOAST_MESSAGE_TEXT,\n    toastController: ToastController = this.toastController\n  ): Promise<void> {\n    const toast: HTMLIonToastElement = await toastController.create({\n      message: msg,\n      duration: 3500,\n      animated: true,\n      translucent: true\n    });\n\n    // tslint:disable-next-line: newline-per-chained-call\n    const toasted: Promise<void> = toast.present().then(() => {\n      console.log(\"Toast presented\");\n    });\n\n    return toasted;\n  }\n\n  compare(count: number, cap: number): boolean {\n    return count < cap;\n  }\n}\n"]}